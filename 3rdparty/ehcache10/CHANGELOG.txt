$Id: CHANGELOG.txt,v 1.10 2004/09/28 06:50:58 gregluck Exp $

ehcache-1.0
===========

Feature Changes
---------------
1. Added SelfPopulatingCacheManager

2. Added a new diskExpiryThreadIntervalSeconds configuration option to ehcache.xml, to allow
tuning of the expiry thread per cache.

3. Added a new diskPersistent feature and configuration option. diskPersistent makes disk stores
persistent between CacheManager and JVM restarts. It enables very long held caches to be configured, useful
for very expensive cache entries that are long lives, such as mapping geocodes.


Bug Fixes
---------
1. Expiry Thread now has a default time of 2 minutes, not 25.

2. Expiry Thread now dies immediately on DiskStore disposal.

3. cache.calculateInMemorySize() now returns a non-zero value

4. Bug 1025130 - Null Pointer Exception when no default cache configured. Now we throw a CacheException with a
meaningful message.

5. Bug 1025128 IBM Websphere alway requires commons-collection.jar, even though it is never used. Updated requirements
to note this.

6. Patch 1030960. JDK1.4 and higher now chain exception thrown from SelfPopulatingCache.

7. 1033061	Fix to Thread naming in SelfPopulatingCache so that the old name is always put back.

8. 1003659	build script unfriendly to IDE: IDE builds should now work.

ehcache-0.9
===========

Feature Changes
---------------
1. ehcache.xml cache definitions can now omit timeToIdle and/or timeToLive, which are now optional attributes.
This will make cache config easier to read for eternal caches.
Either omitting the attributes or setting them to 0 causes them not to be considered when calculating expiry.
Earlier versions of ehcache would have immediately expired all elements if either attribute was set to 0,
so this change should not break any existing code.

2. Added getQuiet and putQuiet methods to Cache. These methods are the same as get and put
   but do not affect statistics.

3. Implemented an Element clone method.

4. Added calculateInMemorySize() method to Cache to measure the approximate size of a cache's
memory footprint.

5. Added a new constructs package. There are blocking, self populating and self populating collections caches.
These are all pull-through caches. They are useful where the cost of creating an entry is high. Details follow:

    BlockingCache - a cache which blocks subsequent threads until the first read thread
    populates a cache entry

    SelfPopulatingCache - a read-through cache. A cache that populates elements as they are requested
    without requiring the caller to know how the entries are populated. It also enables refreshes
    of cache entries without blocking reads on the same entries.

    SelfPopulatingCollectionsCache - a SelfPopulatingCache that adds threading safety where it is known
    in advance that all entries will be collections.

    The package is useful for, inter alia, :

    * Web Page caches
    * Search Engine caches

    See the tests for examples of how to use this package.

    This package requires Doug Lea's concurrency library. A copy is provided in the tools directory
    when you check out the project by cvs. Or, you can get it from http://gee.cs.oswego.edu/dl/cpj/
    Note that if you are not using the constructs package, you do not need the concurrency library.

Bug Fixes
---------
1. JavaDoc fixups

2. Fixed time to idle which was not expiring elements after the idle time had expired. This feature did
not seem to be getting used. It is now useable. Fixed the test which was also broken

3. Fixed bugs with getSize and getKeys, which were not checking for duplicate keys between
the memory and disk stores.

Testing
-------
1. Increased Clover test coverage to above 80%.

2. Added many new tests for idle expiry.

3. Added tests for the new constructs package. These tests demonstrate concurrency performance
differences between blocking cache designs based on notify/notifyAll and Doug Lea's concurrency package.

4. Test new xml format scenarios for eternal, time to idle and time to live

5. Started adding performance tests to ensure there are no regressions over time.

ehcache-0.8
===========
Bug Fixes
---------
1. Fixed a very rare null pointer exception, when retrieving a cache entry.

Testing
-------
1. Investigated a Hibernate SessionFactory bug and clarified it was not a Hibernate bug. Added test.
2. Investigated a cache size possible bug and clarified it is not in EHCache. Added test.
3. Added Clover test coverage reporting. Clover instrumentation is not included in release jars.
4. Updated Hibernate testing to version 2.1.1

Licensing
---------
1. Modified the Apache license at the request of the Apache Cocoon project.

ehcache-0.7
===========
Bug Fixes
---------
1. Cache Configuration
Fixed null pointer exception where the disk store path was not specified when use disk store is set to false
2. JDK1.3 Compatibility
Replaced JDK1.4 Exception constructors with simple message constructors compatible with JDK1.2 and 1.3
3. Problem with Element expiry
Fixed bug where expiry checking on get was calling remove with the element rather than the key.
4. Expire thread should not run if the cache is not active
Changed the expire thread to while(active)
5. Expiry thread unnecessarily being created for eternal caches
Skipped creating the expiry thread if caches are eternal.

ehcache-0.6
===========
Bug Fixes
---------
1. Hibernate Cache Provider.
Fixed bug where incompatible timestamps were generated
2. "Time to Idle" documentation bug.
Fixed documentation bug in ehcache.xml and ehcache-failsafe.xml where "Time to Live" was
incorrectly referred to as "Time to Idle"

Feature Changes
---------------
1. Remove SoftReferences
SoftReferences for cache element values has been replaced with standard references.
The JDK 1.4.2 JVM was found to remove SoftReferences in normal operation, rather than
the expected behaviour of use only to avoid memory exhaustion. Caches will now
behave deterministically. Element values will only be removed when the element is
garbage collected.

ehcache-0.5
===========
Bug Fixes
---------
- Implemented not creating a Disk Store when overflowToDisk="false" is set in ehcache.xml
- toString() methods now report on all fields

Feature Changes
---------------
- Changed from JDK1.4 Logging to Commons Logging. This is to permit JDK1.2 and JDK1.3 to use EHCache.

- Added Apache Commons Collections LRUMap as an alternative backing Map for the MemoryStore. The
java.util.LinkedHashMap has been retained and is used automatically for JDK1.4 and higher.

- Added LICENSE.txt to the jar in the distribution

ehcache-0.4
===========

- Initial version, originally based on a fork from JCS plus donated patches.